#include<time.h>
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<process.h>
#define MAX 5000
int arr[MAX];
void bubble_sort()
{
  long c, d, t;
 for (c = 0 ; c < MAX - 1; c++)
  { for (d = 0 ; d < MAX - c - 1; d++)
    {if (arr[d] > arr[d+1])
      {t         = arr[d];
        arr[d]   = arr[d+1];
        arr[d+1] = t;
      }}
  }}
void selectionSort()
{ int i, j, min_idx;
for (i = 0; i < MAX-1; i++)
    { min_idx = i;
        for (j = i+1; j < MAX; j++)
          if (arr[j] < arr[min_idx])
            min_idx = j;
        int t=arr[min_idx];
        arr[min_idx]=arr[i];
        arr[i]=t;
    }
}
void insertionSort()
{int i, key, j;
    for (i = 1; i < MAX; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }}
int partition (int low, int high)
{int pivot = arr[high]; 
    int i = (low - 1);
	int j;
    for ( j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {i++; 
            int t=arr[i];
            arr[i]=arr[j];
            arr[j]=t;
        }
    }
    int t=arr[i+1];
    arr[i+1]=arr[high];
    arr[high]=t;
    return (i + 1);
}
void quickSort(int low, int high)
{
    if (low < high)
    {
        int pi = partition(low, high);
        quickSort(low, pi - 1);
        quickSort(pi + 1, high);
    }
}
void merge(int l, int m, int r)
{   int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2)
    {if (L[i] <= R[j])
        {arr[k] = L[i];
            i++;
        }
        else
        {arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {  arr[k] = R[j];
        j++;
        k++;
    }}
void mergeSort(int l, int r)
{  if (l < r)
    {  int m = l+(r-l)/2;
        mergeSort(l, m);
        mergeSort(m+1, r);
        merge(l, m, r);
    }
}
int main()
{ int ch,i;
  float time_spent = 0.0;
  clock_t begin;
  clock_t end ;

  while(1)
  {
    printf("--------------------------------------------------------------------------------\n");
    printf("\n-------------------------------------------------------------------------------\n");
    printf("---Enter the sorting whose time complexity for 5000 inputs is to be calculated---\n");
    //taking users choice for sorting type
    printf("-----*****#####                1 for bubble sort                   #####*****-----\n");
    printf("-----*****#####                2 for selection sort                #####*****-----\n");
    printf("-----*****#####                3 for insertion sort                #####*****-----\n");
    printf("-----*****#####                4 for merge sort                    ######*****-----\n");
    printf("-----*****#####                5 for quick sort                    #####*****-----\n");
    printf("-----*****#####                6 to discontinue                    #####*****-----\n");
    printf("---------------------------------------------------------------------------------\n");
    printf("---------------------------------------------------------------------------------\n");
    scanf("%d",&ch);
    switch(ch)
    {
      case 1:
        srand(time(0));
        for(  i=1; i<=5000; i++)
        {
          arr[i]=rand();
        }
        time_spent = 0.0;
        begin = clock();
        bubble_sort();
        end = clock();
        time_spent = ((double)(end - begin)) / CLOCKS_PER_SEC;
        printf("Time elpased is %f seconds", time_spent);
        break;
      case 2:
        srand(time(0));
           for( i=1; i<=5000; i++)
        { arr[i]=rand();
        }
        time_spent = 0.0;
        begin = clock();
        selectionSort();
       end = clock();
        time_spent = ((double)(end - begin)) / CLOCKS_PER_SEC;
         printf("Time elpased is %f seconds", time_spent);
        break;
      case 3:
        srand(time(0));
        for(  i=1; i<=5000; i++)
        {
          arr[i]=rand();
        }
        double time_spent = 0.0;
        begin = clock();
        insertionSort();
        end = clock();
        time_spent =  ((double)(end - begin)) / CLOCKS_PER_SEC;
        printf("Time elpased is %f seconds", time_spent);
        break;
      case 4:
        srand(time(0));
        for(  i=1; i<=5000; i++)
        {
          arr[i]=rand();
        }
        time_spent = 0.0;
        begin = clock();
        mergeSort(0,MAX-1);
         end = clock();
        time_spent =  ((double)(end - begin)) / CLOCKS_PER_SEC;
        printf("Time elpased is %f seconds", time_spent);
        break;
      case 5:
        srand(time(0));
        for(  i=1; i<=5000; i++)
        {
          arr[i]=rand();
        }
        time_spent = 0.0;
        begin = clock();
        quickSort(0,MAX-1);
        end = clock();
        time_spent =  ((double)(end - begin)) / CLOCKS_PER_SEC;
        printf("Time elpased is %f seconds", time_spent);
        break;
      case 6:
        printf("End of project\n");
        exit(0);
    }
  }
        return 0;
}
